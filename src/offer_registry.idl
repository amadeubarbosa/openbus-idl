#ifndef __TECGRAF_OPENBUS_CORE_OFFER_REGISTRY_SERVICE_IDL__
#define __TECGRAF_OPENBUS_CORE_OFFER_REGISTRY_SERVICE_IDL__

/* for the type of object implementing services offered */
#include "scs.idl"
#include "core.idl"

module tecgraf {

module openbus {

module core {

module v2_0 {

module services {

/**
 * \brief Módulo do Serviço de Ofertas.
 */
module offer_registry {

/****************************************************************************/
/* Faceta de Gerência de Ofertas de Serviço *********************************/
/****************************************************************************/

interface OfferObserver; /* forward declaration */
interface ServiceOffer; /* forward declaration */
interface OfferRegistryObserver; /* forward declaration */



/** \brief Identificação de uma faceta de componente SCS. */
typedef string FacetName; /* same type of a SCS facet identifier (name) */
/** \brief Sequência de facetas de componentes SCS. */
typedef sequence<FacetName> FacetNameSeq;

/** \brief Propriedade que descreve um aspecto de uma oferta de serviço. */
struct ServiceProperty {
  string name; /** \brief nome da propriedade */
  string value; /** \brief valor da propriedade */
};
/** \brief Sequência de propriedades que descrevem uma oferta de serviço. */
typedef sequence<ServiceProperty> ServicePropertySeq;

/** \brief Referência para um serviço ofertado. */
typedef scs::core::IComponent OfferedService;

/** \brief Descreve uma oferta de serviço. */
struct ServiceOfferDesc {
  OfferedService service_ref; /** \brief Referência para o serviço ofertado. */
  ServicePropertySeq properties; /** \brief Propriedades do serviço ofertado. */
  ServiceOffer ref; /** \brief Objeto que representa a oferta de serviço. */
};
/** \brief Sequência de descrições de oferta de serviço. */
typedef sequence<ServiceOfferDesc> ServiceOfferDescSeq;

/** \brief Descreve uma inscrição de observador de oferta de serviço. */
struct OfferObserverSubscriptionDesc {
  OfferObserver observer; /** \brief Referência para o observador. */
  OfferedService offer; /** \brief Oferta serviço observada.*/
};
/** \brief Sequência de descrições de inscrições de observadores */
typedef sequence<OfferObserverSubscriptionDesc>
  OfferObserverSubscriptionDescSeq;

/** \brief Descreve uma inscrição de observador de oferta de serviço. */
struct OfferRegistryObserverSubscriptionDesc {
  OfferRegistryObserver observer; /** \brief Referência para o observador. */
  ServicePropertySeq properties; /** \brief Propriedades do serviço ofertado. */
};
/** \brief Sequência de descrições de inscrições de observadores */
typedef sequence<OfferRegistryObserverSubscriptionDesc>
  OfferRegistryObserverSubscriptionDescSeq;

/** \brief Identificador da inscrição de um observador. */
typedef long Cookie;

/**
 * \brief Indica que o serviço oferece facetas não autorizadas para a
 *        entidade que registra a oferta de serviço
 */
exception UnauthorizedFacets { FacetNameSeq facets; };

/**
 * \brief Indica que a lista de propriedades fornecida ao registrar uma
 *        oferta de serviço inclui propridades inválidas, tais como
 *        propriedades automáticas (cujo nome começam com 'openbus.').
 */
exception InvalidProperties { ServicePropertySeq properties; };

/**
 * \brief Indica que a referência fornecida do serviço não apresenta o formato
 *        esperado, que no caso é um componente SCS bem formado.
 */
exception InvalidService {};


/**
 * \brief Representa um observador de oferta já cadastrada.
 */
interface OfferObserver {
  /**
   * \brief Notifica que a oferta observada teve as propriedades atualizadas.
   *
   * \param offer O descritor da oferta.
   */  
  void propertiesChanged(in ServiceOfferDesc offer);

  /**
   * \brief Notifica que a oferta observada foi removida.
   *
   * \param offer O descritor da oferta.
   */
  void removed(in ServiceOfferDesc offer);
};

/**
 * \brief Representa um observador de registro de ofertas.
 */
interface OfferRegistryObserver {
  /**
   * \brief Notifica que uma oferta que atende ao critério de propriedades do 
   *        observador foi registrada.
   *
   * \param offer A oferta registrada que atende ao critério de propriedades.
   */
  void offerRegistered(in ServiceOfferDesc offer);
};

/**
 * \brief Representa a inscrição de um observador de oferta de serviço.
 */
interface OfferObserverSubscription {

  /** \brief Referência para o observador inscrito. */
  readonly attribute OfferObserver observer;
  
  /** \brief Referência para o observador inscrito. */
  readonly attribute ServiceOffer offer;
  
  /**
   * \brief Devolve uma estrutura descrevedo a inscrição do observador. 
   *
   * \return A descrição da inscrição do observador
   */
  OfferObserverSubscriptionDesc describe();
  
  /**
   * \brief Remove a incrição do observador.
   *
   * Essa operação permite remover a inscrição do observador. Essa operação só
   * pode ser chamada pela mesma entidade que registrou a oferta ou por uma
   * entidade com permissão de adminstração no barramento.
   *
   * \exception UnauthorizedOperation Entidade que chama não é a mesma que
   *                                  registrou a oferta nem administrador.
   */
  void remove() raises (UnauthorizedOperation, ServiceFailure);
};

/**
 * \brief Representa a inscrição de um observador de registro oferta de serviço.
 */
interface OfferRegistryObserverSubscription {
  /** \brief Referência para o observador inscrito. */
  readonly attribute OfferRegistryObserver observer;
  
  /**
   * \brief Lista de propriedades de oferta que o observador está interessado.
   *
   * Sempre que uma oferta com essas propriedades é registrada, o observador é
   * notificado.
   */
  readonly attribute ServicePropertySeq properties;
  
  /**
   * \brief Devolve uma estrutura descrevedo a inscrição do observador. 
   *
   * \return A descrição da inscrição do observador
   */
  OfferRegistryObserverSubscriptionDesc describe();
  
  /**
   * \brief Remove a incrição do observador.
   *
   * Essa operação permite remover a inscrição do observador. Essa operação só
   * pode ser chamada pela mesma entidade que registrou a oferta ou por uma
   * entidade com permissão de adminstração no barramento.
   *
   * \exception UnauthorizedOperation Entidade que chama não é a mesma que
   *                                  registrou a oferta nem administrador.
   */
  void remove() raises (UnauthorizedOperation, ServiceFailure);
};

/**
 * \brief Representa uma oferta de serviço.
 */
interface ServiceOffer {
  /** \brief Referência para o serviço ofertado. */
  readonly attribute OfferedService service_ref;
  
  /**
   * \brief Lista de propriedades do serviço ofertado.
   *
   * As seguintes propriedades são geradas automaticamente no registro de uma
   * oferta e não são alteradas através da operação \c setProperties.
   *
   * openbus.offer.id: Ident. único da oferta.
   * openbus.offer.login: Ident. do login com que a oferta foi registrada.
   * openbus.offer.entity: Ident. da entidade que registrou a oferta.
   * openbus.offer.timestamp: Número indicando o momento do registro da oferta.
   * openbus.offer.year: Ano em que a oferta foi registrada.
   * openbus.offer.month: Número do mês em que a oferta foi registrada.
   * openbus.offer.day: Dia do mês que a oferta foi registrada.
   * openbus.offer.hour: Hora do dia em que a oferta foi registrada.
   * openbus.offer.minute: Minuto do dia em que a oferta foi registrada.
   * openbus.offer.second: Segundo do dia em que a oferta foi registrada.
   * openbus.component.name: Nome do componente SCS que implementa o serviço.
   * openbus.component.version.major: Versão maior do componente SCS que implementa o serviço.
   * openbus.component.version.minor: Versão menor do componente SCS que implementa o serviço.
   * openbus.component.version.patch: Versão de correção do componente SCS que implementa o serviço.
   * openbus.component.facet: Nome de faceta oferecida pelo component SCS que implementa o serviço.
   * openbus.component.interface: RepID de interface implementada por faceta do component SCS que implementa o serviço.
   */
  readonly attribute ServicePropertySeq properties;
  
  /**
   * \brief Devolve uma estrutura descrevedo a oferta de serviço. 
   *
   * \return A descrição da oferta
   */
  ServiceOfferDesc describe();
  
  /**
   * \brief Altera as propriedades do serviço ofertado.
   *
   * Essa operação permite alterar as propriedades do serviço ofertado que
   * ficam disponíveis através do atributo 'properties'. Essa operação só pode
   * ser chamada pela mesma entidade que registrou a oferta ou por uma entidade
   * com permissão de adminstração no barramento.
   *
   * \param properties Novas propriedades da oferta de serviço.
   *
   * \exception InvalidProperties A lista de propriedades fornecida inclui
   *                              propridades inválidas, tais como
   *                              propriedades automáticas (cujo nome começam
   *                              com 'openbus.').
   * \exception UnauthorizedOperation Entidade que chama não é a mesma que
   *                                  registrou a oferta nem administrador.
   */
  void setProperties(in ServicePropertySeq properties)
    raises (InvalidProperties, UnauthorizedOperation, ServiceFailure);
  
  /**
   * \brief Remove a oferta de serviço.
   *
   * Essa operação permite remover o serviço ofertado. Essa operação só pode
   * ser chamada pela mesma entidade que registrou a oferta ou por uma entidade
   * com permissão de adminstração no barramento.
   *
   * \exception UnauthorizedOperation Entidade que chama não é a mesma que
   *                                  registrou a oferta nem administrador.
   */
  void remove() raises (UnauthorizedOperation, ServiceFailure);
  
  /**
   * \brief Inscreve um observador da oferta.
   *
   * \param observer O observador.
   *
   * \return Objeto que representa a inscrição do observador.
   */
  OfferObserverSubscription subscribeObserver(in OfferObserver observer)
    raises (ServiceFailure);
};


/**
 * \brief Representa o registro de ofertas de serviço.
 */
interface OfferRegistry {
  /**
   * \brief Registra uma oferta de serviço.
   *
   * \param service_ref Referência serviço sendo ofertado.
   * \param properties Propriedades do serviço sendo ofertado.
   *
   * \return Nova oferta de serviço.
   *
   * \exception InvalidService O componente SCS fornecido não é válido, por
   *                           não apresentar facetas padrão definidas pelo
   *                           modelo de componetes SCS.
   * \exception InvalidProperties A lista de propriedades fornecida inclui
   *                              propriedades inválidas, tais como
   *                              propriedades com nomes reservados (cujos 
   *                              nomes começam com 'openbus.').
   * \exception UnauthorizedFacets O componente que implementa o serviço
   *                               apresenta facetas com interfaces que não
   *                               estão autorizadas para a entidade
   *                               realizando o registro da oferta de serviço.
   */
  ServiceOffer registerService(in OfferedService service_ref,
                               in ServicePropertySeq properties)
    raises (InvalidService, InvalidProperties, UnauthorizedFacets,
            ServiceFailure);
  
  /**
   * \brief Busca por ofertas que apresentem um conjunto de propriedades
   *        definido.
   * 
   * Devolve uma lista contendo apenas as ofertas de serviço que apresentem
   * todas as  propriedades especificadas. Em particular, caso nenhuma
   * propriedade seja especificada, nenhuma oferta é incluida no resultado
   * dessa operação. As propriedades utilizadas nas buscas podem ser aquelas
   * fornecidas no momento do registro da oferta de serviço, assim como as
   * propriedades automaticamente geradas pelo registro de ofertas de serviços.
   * 
   * \param properties Propriedades que as ofertas de serviços encontradas
   *                   devem apresentar.
   *
   * \return Sequência de descrições de ofertas de serviço encontradas.
   */
  ServiceOfferDescSeq findServices(in ServicePropertySeq properties)
    raises (ServiceFailure);
  
  /**
   * \brief Devolve uma lista de todas as ofertas de serviço registradas.
   * 
   * \return Sequência de descrições de ofertas de serviço registradas.
   */
  ServiceOfferDescSeq getServices() raises (ServiceFailure);

  /**
   * \brief Inscreve um observador de registro de ofertas que atendem ao 
   *        conjunto de propriedades especificadas.
   *
   * \param observer O observador.
   * \param properties Propriedades que as ofertas de serviços registradas
   *                   devem apresentar para que o observador seja notificado.
   *
   * \return Objeto que representa a inscrição do observador.
   */
  OfferRegistryObserverSubscription subscribeObserver(
    in OfferRegistryObserver observer,
    in ServicePropertySeq properties)
    raises (ServiceFailure);
};

/****************************************************************************/
/* Faceta de Gerência de Autorização de Entidades ***************************/
/****************************************************************************/

interface RegisteredEntity; /* forward declaration */
interface EntityCategory; /* forward declaration */



/** \brief Descrição de uma categoria de entidade. */
struct EntityCategoryDesc {
  Identifier id;      /** \brief Identificador da categoria. */
  string name;        /** \brief Nome descritivo da categoria. */
  EntityCategory ref; /** \brief Objeto que representa a categoria. */
};
/** \brief Sequência de descrições de catergorias de entidade. */
typedef sequence<EntityCategoryDesc> EntityCategoryDescSeq;

/** \brief Descrição de uma entidade registrada. */
struct RegisteredEntityDesc {
  EntityCategory category; /** \brief Categoria da entidade. */
  Identifier id;           /** \brief Identificador da entidade. */
  string name;             /** \brief Nome descritivo da entidade. */
  RegisteredEntity ref;    /** \brief Objeto que representa a entidade. */
};
/** \brief Sequência de descrições sobre entidades registradas */
typedef sequence<RegisteredEntityDesc> RegisteredEntityDescSeq;

/** \brief Identificação de uma interface. */
typedef string InterfaceId; /* same type of interface identifiers of SCS */
/** \brief Sequência de identificações de interface. */
typedef sequence<InterfaceId> InterfaceIdSeq;



/** \brief Indica que uma entidade com o identificador dado já está registrada. */
exception EntityAlreadyRegistered { RegisteredEntityDesc existing; };

/** \brief Indica que uma categoria com o identificador dado já existe. */
exception EntityCategoryAlreadyExists { EntityCategoryDesc existing; };

/** \brief Indica que existe entidades nessa categoria de entidade. */
exception EntityCategoryInUse { RegisteredEntityDescSeq entities; };

/** \brief Indica que a especificação de interfaces autorizadas é inválida. */
exception InvalidInterface { InterfaceId ifaceId; };

/** \brief Indica que uma oferta existente exige a autorização removida. */
exception AuthorizationInUse { ServiceOfferDescSeq offers; };



/** 
 * \brief Representa uma categoria de entidades no barramento.
 *
 * Categorias de entidade são agrupamentos usados exclusivamente para
 * facilitar a gerência das diversas entidades cadastradas no barramento
 * pelo administrador do sistema.
 */
interface EntityCategory {
  readonly attribute Identifier id; /** \brief Identificador da categoria */
  readonly attribute string name;   /** \brief Nome descritivo da categoria */
  
  /** 
   * \brief Devolve uma estrutura descrevedo a categoria de entidade.
   *
   * \return A descrição da categoria de entidade
   */
  EntityCategoryDesc describe();
  
  /**
   * \brief Altera a descrição da categoria.
   *
   * \param name Nome descritivo da categoria.
   *
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  void setName(in string name) raises (UnauthorizedOperation, ServiceFailure);

  /** 
   * \brief Remove a categoria de entidade.
   *
   * A categoria só é removida se não existir nenhuma entidade nela.
   *
   * \exception EntityCategoryInUse A categoria possui alguma entidade.
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  void remove()
    raises (EntityCategoryInUse, UnauthorizedOperation, ServiceFailure);
  
  /** 
   * \brief Remove a categoria e todas suas entidades.
   *
   * Se houver alguma entidade cadastrada nessa categoria  ela também é
   * removida.
   *
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  void removeAll() raises (UnauthorizedOperation, ServiceFailure);
  
  /**
   * \brief Cria uma nova entidade nessa categoria.
   *
   * \param id Identificador da entidade (deve ser único no barramento).
   * \param name Nome descritivo da entidade (texto livre).
   *
   * \exception EntityAlreadyRegistered Indica que uma entidade com esse
   *            identificador já está registrada.
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  RegisteredEntity registerEntity(in Identifier id, in string name)
    raises (EntityAlreadyRegistered, UnauthorizedOperation, ServiceFailure);
  
  /**
   * \brief Recupera todas entidades nessa categoria.
   *
   * \return Sequência de descrições das entidades nessa categoria. 
   */
  RegisteredEntityDescSeq getEntities() raises (ServiceFailure);
};

/** 
 * \brief Representa uma entidade do barramento registrada.
 *
 * Entidade é tudo aquilo que pode se logar ao barramento e usufruir dos
 * recursos do barramento. Em particular, tanto usuários humanos como
 * implantações de sistema são considerados entidades. Entidades podem ou não
 * ser cadastradas no serviço. Apenas entidades cadastradas podem ser
 * autorizadas a ofertar serviços.
 */
interface RegisteredEntity {
  readonly attribute EntityCategory category; /** \brief Categoria da entidade */
  readonly attribute Identifier id; /** \brief Identificador da entidade */
  readonly attribute string name; /** \brief Nome descritivo da entidade */
  
  /** 
   * \brief Devolve uma estrutura descrevedo a entidade registrada. 
   *
   * \return A descrição da entidade registrada
   */
  RegisteredEntityDesc describe();
  
  /**
   * \brief Altera o nome descritivo da entidade.
   *
   * \param name Nome descritivo da entidade.
   *
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  void setName(in string name) raises (UnauthorizedOperation, ServiceFailure);
  
  /** 
   * \brief Remove o registro da entidade.
   *
   * Todas as autorizações e ofertas de serviço da entidade são removidas
   * juntamente com a entidade.
   *
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  void remove() raises (UnauthorizedOperation, ServiceFailure);
  
  /**
   * \brief Autoriza que a entidade possa ofertar serviços que implementem
   *        essa interface.
   *
   * \param ifaceId Identificador da interface a ser autorizada.
   *
   * \result \c true caso a interface não estava autorizada e passou a ser
   *         autorizada ou \c false caso a interface já estava autorizada e
   *         a operação não resultou em nenhuma mudança.
   *
   * \exception InvalidInterface A interface é inválida (não está registrada).
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  boolean grantInterface(in InterfaceId ifaceId)
    raises (InvalidInterface, UnauthorizedOperation, ServiceFailure);
  
  /**
   * \brief Remove a autorização da entidade de ofertar serviços que
   *        implementem a interface.
   *
   * \param ifaceId Identificador da interface a ser revogada.
   *
   * \result \c true caso a interface estava autorizada e deixou de ser
   *         autorizada ou \c false caso a interface já não era autorizada e
   *         a operação não resultou em nenhuma mudança.
   *
   * \exception InvalidInterface A interface é inválida (não está registrada).
   * \exception AuthorizationInUse Existem ofertas de serviço dessa entidade
   *                               que implementam interfaces referentes a
   *                               essa autorização.
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  boolean revokeInterface(in InterfaceId ifaceId)
    raises (InvalidInterface, AuthorizationInUse,
            UnauthorizedOperation, ServiceFailure);
  
  /**
   * \brief Devolve a lista de especificações de interfaces autorizadas
   *        associados a essa entidade.
   *
   * \return Lista de especificação de interfaces autorizadas.
   */
  InterfaceIdSeq getGrantedInterfaces()
    raises (ServiceFailure);
};

/**
 * \brief Interface de registro de entidades do barramento.
 */
interface EntityRegistry {
  
  /** 
   * \brief Cria uma nova cateroria de entidade no barramento.
   *  
   * \param id Identificador da categoria (deve ser único no barramento).
   * \param name Nome descritivo da categoria (texto livre).
   *
   * \exception EntityCategoryAlreadyExists Indica que uma categoria com o mesmo
   *                                        identificador já está existe.
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  EntityCategory createEntityCategory(in Identifier id, in string name)
    raises (EntityCategoryAlreadyExists, UnauthorizedOperation, ServiceFailure);
  
  /** 
   * \brief Recupera todas as categorias de entidade existentes.
   *
   * \return Uma sequência de descrições das categorias.
   */
  EntityCategoryDescSeq getEntityCategories() raises (ServiceFailure);
  
  /** 
   * \brief Busca um categoria de entidade pelo seu identificador.
   *
   * \param id Identificador da categoria a ser buscada.
   *
   * \return Categoria encontrada com aquele identifcador ou \c null caso não
   *         exista nenhuma categoria com o identificador fornecido.
   */
  EntityCategory getEntityCategory(in Identifier id) raises (ServiceFailure);
  
  /**
   * \brief Obtém todas entidades registradas.
   *
   * \return Sequência de descrições das entidades registradas.
   */
  RegisteredEntityDescSeq getEntities() raises (ServiceFailure);
  
  /**
   * \brief Busca uma entidade pelo seu identificador.
   *
   * \param id Identificador da entidade a ser buscada.
   * 
   * \return Entidade encontrada com aquele identifcador ou \c null caso não
   *         exista nenhuma entidade com o identificador fornecido.
   */
  RegisteredEntity getEntity(in Identifier id) raises (ServiceFailure);
  
  /**
   * \brief Obtém todas as entidades registradas com alguma autorização de
   *        interface associada.
   *
   * \return Sequência de descrições das entidades encontradas.
   */
  RegisteredEntityDescSeq getAuthorizedEntities() raises (ServiceFailure);
  
  /**
   * \brief Obtém todas as entidades registradas que tenham autorizações de
   *        interface que casem com um conjunto de interfaces fornecido
   *
   * \param interfaces Sequência de interfaces que as entidades devem estar
   *                   autorizadas a fornecer através de serviços.
   * 
   * \return Sequência de entidades autorizadas a fornecer as interfaces
   *         especificadas através de serviços.
   */
  RegisteredEntityDescSeq getEntitiesByAuthorizedInterfaces(
    in InterfaceIdSeq interfaces) raises (ServiceFailure);
};

/****************************************************************************/
/* Faceta de Gerência de Interfaces Autorizadas *****************************/
/****************************************************************************/

/** \brief Indica que uma interface está autorizada para algumas entidades. */
exception InterfaceInUse { RegisteredEntityDescSeq entities; };



/**
 * \brief Interface de registro de interfaces do barramento.
 */
interface InterfaceRegistry {
  /** 
   * \brief Registra uma interface autorizada no cadastro.
   *
   * \param ifaceId Identificador da interface.
   *
   * \return \c true caso a interface não estava registrada e foi registrada,
   *         e \c false caso a interface já estava registrada.
   *
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  boolean registerInterface(in InterfaceId ifaceId) 
    raises (InvalidInterface, UnauthorizedOperation, ServiceFailure);
  
  /** 
   * \brief Remove uma interface autorizada do cadastro.
   *
   * \param ifaceId Identificador da interface.
   *
   * \return \c true caso a interface estava registrada e foi removida, e
   *         \c false caso a interface não estivesse registrada.
   *
   * \exception UnauthorizedOperation Entidade que chama não é administrador.
   */
  boolean removeInterface(in InterfaceId ifaceId)
    raises (InterfaceInUse, UnauthorizedOperation, ServiceFailure);
  
  /** 
   * \brief Devolve uma lista de todas as interfaces cadastradas.
   *
   * \return Lista de interfaces cadastradas.
   */
  InterfaceIdSeq getInterfaces() raises (ServiceFailure);
};

}; // offer_registry

}; // services

}; // version

}; // core

}; // openbus

}; // tecgraf

#endif
