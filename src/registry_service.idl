#ifndef __TECGRAF_OPENBUS_CORE_REGISTRY_SERVICE_IDL__
#define __TECGRAF_OPENBUS_CORE_REGISTRY_SERVICE_IDL__

#include "core.idl"
#include "scs.idl"
#include "access_control_service.idl"

module tecgraf {

module openbus {

module core {

module v1_06 {

/**
 * \brief Módulo do Serviço de Registro.
 */
module registry_service {

typedef sequence<string> PropertyValue;

/**
 * \brief Representa uma propriedade.
 */
struct Property {
  string name;
  PropertyValue value;
};
typedef sequence<Property> PropertyList;

/**
 * \brief Representa uma oferta de serviço.
 */
struct ServiceOffer {
  PropertyList properties; /**< \brief Propriedades. */
  scs::core::IComponent member; /**< \brief O membro que está ofertando o serviço. */
};
typedef sequence<ServiceOffer> ServiceOfferList;

/** \brief O identificador do registro de um serviço. */
typedef Identifier OfferIdentifier;

/**
 * \brief Representa uma faceta.
 */
typedef string Facet;
typedef sequence<Facet> FacetList;

/**
 * \brief Representa uma entrada completa de oferta de serviço.
 */
struct ServiceOfferEntry {
  ServiceOffer aServiceOffer; /**< \brief Oferta de servico. */
  tecgraf::openbus::core::v1_06::access_control_service::Credential
      aCredential;/**< \brief Credential do servico que disponibiliza a oferta. */
  OfferIdentifier identifier; /**< \brief O identificador do registro de um serviço. */
  string authorizedFacets;/**< \brief As facetas (serializadas em strings) autorizadas do membro que oferta o servico */
  PropertyList properties;/**< \brief As propriedades da oferta */
};

/**
 * \brief Representa uma lista de entradas completas de ofertas de serviço.
 */
typedef sequence<ServiceOfferEntry> ServiceOfferEntryList;

/** \brief Indica que o serviço tentou registrar alguma faceta não autorizada */
exception UnauthorizedFacets {
  FacetList facets; /**< \brief Lista de facetas não autorizadas */
};

/** \brief Indica que Serviço de Registro não possui a oferta de serviço indicada */
exception ServiceOfferDoesNotExist {};

exception InvalidMember {};

exception InvalidProperties{};

/**
 * \brief Representa o serviço de registro.
 */
interface IRegistryService {
    /**
     * \brief Registra uma oferta de serviço.
     *
     * \param aServiceOffer A oferta de serviço.
     *
     * \return Um identificador para o registro.
     *
     * \exception UnauthorizedFacets Serviço sem autorização para publicar uma
     *  ou mais facetas.
     */
    OfferIdentifier register(in PropertyList properties,
      in scs::core::IComponent member) raises (InvalidMember,
      InvalidProperties, UnauthorizedFacets, ServiceFailure);

    /**
     * \brief Remove uma oferta de serviço.
     *
     * \param identifier O identificador do registro da oferta do serviço.
     *
     * \return \c true, caso a oferta de serviço seja removida, ou \c false,
     * caso contrário.
     */
    void unregister(in OfferIdentifier identifier) raises (ServiceOfferDoesNotExist, ServiceFailure);

    /**
     * \brief Atualiza uma oferta de serviço.
     *
     * \param identifier O identificador do registro da oferta do serviço.
     * \param newProperties O novo conjunto de propriedades associado à oferta
     *
     * \return \c true, caso a oferta de serviço seja atualizada, ou \c false,
     * caso contrário.
     *
     * \exception UnauthorizedFacets Serviço sem autorização para publicar uma
     *   ou mais facetas.
     * \exception ServiceOfferNonExistent O membro não possui nenhuma oferta
     *   relacionada com o identificador informado.
     */
    void setOfferProperties (in OfferIdentifier identifier, in PropertyList newProperties)
      raises (ServiceOfferDoesNotExist, InvalidProperties, ServiceFailure);

    /**
     * \brief Realiza uma busca por ofertas através de uma lista de facetas.
     *
     *   Serão selecionadas as ofertas de serviços que implementam todas as 
     *   facetas descritas em facets.
     *
     * \param facets As facetas da busca.
     *
     * \return As ofertas encontradas.
     */
    ServiceOfferList find (in FacetList facets) raises (ServiceFailure);

    /**
     * \brief Realiza uma busca por ofertas através de uma lista de facetas e critérios.
     * 
     *   Serão selecionadas as ofertas de serviços que implementam todas as 
     *   facetas descritas em facets, e, que satisfaçam aos critérios 
     *   especificados.
     *
     * \param facets As facetas da busca.
     * \param criteria Os critérios da busca.
     *
     * \return As ofertas encontradas.
     */
    ServiceOfferList findByCriteria (in FacetList facets, in PropertyList criteria) raises (ServiceFailure);
};

interface ServiceOfferEntryManagement {
  /**
   * \brief Realiza uma busca por ofertas através de uma lista de facetas e 
   *   critérios, se forem especificados.
   * 
   *   Serão selecionadas as ofertas de serviços que implementam todas as 
   *   facetas descritas em facets, e, que satisfaçam aos critérios 
   *   (propriedades) especificados.
   *
   * \param facets As facetas da busca.
   * \param criteria Os critérios da busca.
   *
   * \return As entradas das ofertas encontradas.
   */
  ServiceOfferEntryList localFind (in FacetList facets, in PropertyList criteria);
};

/*----------------------------- Interface ------------------------------*/

/** \brief Identificador de interface. */
typedef string InterfaceIdentifier;

/** \brief Seqüência de indetificadores de interface. */
typedef sequence<InterfaceIdentifier> InterfaceIdentifierList;

exception InvalidInterfaceIdentifier {};

/** \brief Identificador de interface em uso por alguma autorização. */
exception InterfaceInUse {};

/** \brief Identificador de interface não encontrado. */
exception InterfaceIdentifierNotFound {};

/** \brief Identificador de interface não existente. */
exception InterfaceDoesNotExist {};

/** \brief Identificador de interface já cadastrado.*/
exception InterfaceAlreadyExists {};

/*---------------------------- Autorização -----------------------------*/

/** Tipo da autorização */
enum AuthorizationType { ATUser, ATSystemDeployment };

struct Authorization {
  string entityId;
  string interfaceIdentifier;
};
typedef sequence<Authorization> AuthorizationList;

/** \brief Autorização para uma implantação de sistema. */
struct EntityAuthorizations {
  string entityId; /**< Identificador do membro */
  AuthorizationType type; /**< Tipo de membro que tem autorização */
  InterfaceIdentifierList authorized; /**< Interfaces autorizadas */
};

/** \brief Seqüência de autorizações. */
typedef sequence<EntityAuthorizations> EntityAuthorizationsList;

/**
 * \brief Representa as facetas em uma entrada no Serviço de Registro
 */
struct OfferedInterfaces {
  OfferIdentifier offerId;              /**< Identificar da oferta */
  string entityId;                      /**< Identificador do membro que efetuou o registro */
  InterfaceIdentifierList interfaces; /**< Interfaces não autorizadas */
};

typedef sequence<OfferedInterfaces> OfferedInterfacesList;

/** \brief Membro não existe. */
exception EntityDoesNotExist {};

/** \brief Autorização não existe. */
exception AuthorizationDoesNotExist {};

/** \brief Expressão regular inválida. */
exception InvalidRegularExpression {};

exception EntityHasNoAuthorization {};

/**
 * \brief Interface de gerenciamento de autorizações de serviços.
 *
 */
interface IManagement {

  /*--------------------------- Interface ------------------------------*/

  /**
   * \brief Cadastra um identificador de interface aceito
   *   pelo Serviço de Registro.
   *
   * \param ifaceId Identificador de interface.
   * \exception InterfaceIdentifierAlreadyExists Identificador já cadastrado.
   */
  void addInterface(in InterfaceIdentifier ifaceId)
    raises (InterfaceAlreadyExists, InvalidInterfaceIdentifier, ServiceFailure);

  /**
   * \brief Remove o identificador.
   *
   * \param ifaceId Identificador de interface.
   *
   * \exception InterfaceIdentifierNonExistent Identificador não cadastrado.
   * \exception InterfaceIdentifierInUse Identificador é referenciado por
   *   algum elemento do sistema.
   */
  void removeInterface(in InterfaceIdentifier ifaceId)
    raises (InterfaceInUse, InterfaceDoesNotExist, ServiceFailure);

  /**
   * \brief Recupera todos os identificadores de interface cadastrados.
   *
   * \return Seqüência de identificadores de interface.
   */
  InterfaceIdentifierList getInterfaces() raises (ServiceFailure);

  /*-------------------------- Autorização -----------------------------*/

  /**
   * \brief Autoriza o membro a exportar a interface.
   *   O Serviço de  Acesso é consultado  para verificar  se o usuário
   *   ou a implantação estão cadastrados.
   *
   * \param id Identificador do membro do barramento (usuário ou implantação).
   * \param ifaceId Identificador da interface ou expressão regular.
   *
   * \exception MemberNonExistent Membro não cadastrado.
   * \exception InterfaceIdentifierNonExistent Interface não cadastrada.
   * \exception InvalidRegularExpression Identificador da interface possui
   *   uma expressão regular inválida.
   */
  void grant(in string entityId, in InterfaceIdentifier ifaceId)
    raises (EntityDoesNotExist,
    InterfaceDoesNotExist, InvalidRegularExpression);

  /**
   * \brief Revoga a autorização para exportar a interface.
   *
   * \param id Identificador do membro cadastrado.
   * \param ifaceId Identificador da interface.
   *
   * \exception AuthorizationNonExistent Membro não possui autorização.
   */
  void revoke(in string entityId, in InterfaceIdentifier ifaceId)
    raises (AuthorizationDoesNotExist, ServiceFailure);

  /**
   * \brief Remove a autorização do membro.
   *
   * \param id Identificador do membro.
   * \exception AuthorizationNonExistent Membro não possui autorização.
   */
  void revokeAll(in string entityId)
    raises (EntityHasNoAuthorization, ServiceFailure);

  /**
   * \brief Recupera a autorização de um membro.
   *
   * \param id Identificador do membro.
   *
   * \return Autorização do membro.
   * \exception AuthorizationNonExistent Membro não possui autorização.
   */
  EntityAuthorizations getEntityAuthorizations(in string entityId)
    raises (EntityHasNoAuthorization, ServiceFailure);

  /**
   * \brief Recupera todas as autorizações cadastradas.
   *
   * \return Seqüência de autorizações.
   */
  EntityAuthorizationsList getAllEntityAuthorizations() raises (ServiceFailure);

  /**
   * \brief Recupera as autorizações que contêm \e todas as interfaces
   *  fornecidas em seu conjunto de interfaces autorizadas.
   *
   * \param ifaceIds Identificador das interfaces.
   *
   * \return Seqüência de autorizações.
   */
  EntityAuthorizationsList getAuthorizationsByInterfaceId(
    in InterfaceIdentifierList ifaceIds) raises (InterfaceDoesNotExist,
    ServiceFailure);

  /**
   * \brief Recupera todas as interfaces oferecidas no registro.
   *
   * \return Seqüência de interfaces registradas.
   */
   OfferedInterfacesList getOfferedInterfaces() raises (ServiceFailure);

  /**
   * \brief Recupera todas as interfaces oferecidas no registro por 
   * um dado membro.
   *
   * \param member Identificador do membro do barramento.
   *
   * \return Seqüência de interfaces registradas pelo membro.
   */
  OfferedInterfacesList getOfferedInterfacesByEntity(in string entityId)
    raises (EntityDoesNotExist, ServiceFailure);
};

}; // registry_service

}; // version

}; // core

}; // openbus

}; // tecgraf

#endif
