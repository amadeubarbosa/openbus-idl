#ifndef __TECGRAF_OPENBUS_CORE_ACCESS_CONTROL_SERVICE_IDL__
#define __TECGRAF_OPENBUS_CORE_ACCESS_CONTROL_SERVICE_IDL__

#include "core.idl"
#include "scs.idl"

module tecgraf {

module openbus {

module core {

module v1_06 {

/**
 * \brief Módulo do Serviço de Controle de Acesso.
 */
module access_control_service {

/** \brief Representa o identificador de uma credencial. */
typedef Identifier CredentialIdentifier;

/** \brief Representa uma sequência de identificadores de credenciais. */
typedef sequence<CredentialIdentifier> CredentialIdentifierList;

/**
 * \brief Representa a credencial de um membro.
 */
struct Credential {
  CredentialIdentifier fIdentifier; /**< \brief Identificador único. */
  string fOwner; /**< \brief Nome da entidade dona. */
  string fDelegate; /**< \brief Nome da entidade delegada (opcional). */
};

/** \brief Representa uma sequência de credenciais. */
typedef sequence<Credential> CredentialSeq;

/**
 * \brief Representa um observador de credenciais. Esse observador será
 * notificado quando acontecerem alterações nas credenciais que ele observa.
 */
interface ICredentialObserver {
  /**
   * \brief Notifica que uma credencial foi removida.
   *
   * \param fCredential A credencial que foi removida.
   */
  void credentialWasDeleted(in Credential fCredential);
};

/** \brief Representa a validade de uma credencial (s). */
typedef long Lease;

interface ILeaseProvider {
  /**
   * \brief Renova o lease de uma credencial.
   *
   * \param[in] fCredential A credencial da entidade.
   * \param[out] fLease O tempo de validade da credencial.
   *
   * \return \c true, caso o \c lease seja renovado, ou \c false, caso
   * contrário.
   */
   boolean renewLease (in Credential fCredential, out Lease fLease);
};

exception IncorrectChallengeAnswer {
	string fEntityName;
};

interface CertificateAuthenticator {
  Credential login (in OctetSeq fAnswer, out Lease fLease)
      raises (IncorrectChallengeAnswer, ServiceFailure);
  OctetSeq getChallenge () raises (ServiceFailure);
  oneway void cancel ();
};

exception InvalidCredential {
  Credential fCredential;
};

exception InvalidCredentials {
  CredentialSeq fCredentialSeq;
};

exception UnwatchedCredential {
  Credential fCredential;
};

exception UnwatchedCredentials {
  CredentialSeq fCredentialSeq;
};

exception IncorrectPassword {
  string fEntityName;
};

exception InvalidSystemDeployment {
  string fEntityName;
};

/**
 * \brief Representa o serviço de controle de acesso.
 */
interface IAccessControlService {
  /**
   * \brief Autentica uma entidade através de um nome e uma senha.
   *
   * \param[in] fName O nome.
   * \param[in] fPassword A senha.
   * \param[out] fLease O tempo de validade da credencial da entidade.
   *
   * \return A credencial da entidade.
   */
  Credential loginByPassword (in string fName, in string fPassword,
      out Lease fLease) raises (IncorrectPassword, ServiceFailure);
  
  /**
   * \brief Autentica uma entidade através de um nome e de uma resposta para um desafio
   * previamente obtido.
   *
   * \param[in] name O nome.
   * \param[in] answer A reposta para o desafio.
   * \param[out] aCredential Uma credencial para a entidade.
   * \param[out] aLease Um lease que define a validade da credencial.
   *
   * \return \c true, caso o login seja realizado com sucesso, ou \c false,
   * caso contrário.
   *
   * \see getChallenge
   */
  CertificateAuthenticator getCertificateAuthenticator
    (in string fSystemDeploymentId, out OctetSeq fChallenge)
    raises (InvalidSystemDeployment, ServiceFailure);

  /**
   * \brief Efetua o \c logout de uma entidade.
   *
   * \param aCredential A credencial da entidade.
   *
   * \return \c true, caso o \c logout seja realizado, ou \c false,
   * caso contrário.
   */
  void logout (in Credential fCredential)
      raises (InvalidCredential, ServiceFailure);

  /**
   * \brief Verifica se uma determinada credencial está válida.
   *
   * \param aCredential A credencial.
   *
   * \return \c true, caso a credencial esteja válida, ou \c false,
   * caso contrário.
   */
  boolean isValid (in Credential fCredential) raises (ServiceFailure);

  /**
   * \brief Verifica a validade de uma sequência de credenciais.
   *
   * \param credentials A sequência de credenciais.
   *
   * \return Uma sequência indicando para cada credencial se ela é válida
   * ou não.
   */
  BooleanSeq areValid (in CredentialSeq fCredentials) raises (ServiceFailure);
};

interface CredentialObserver {
  void watchCredential(in Credential fCredential)
      raises (InvalidCredential, ServiceFailure);
  void unwatchCredential(in Credential fCredential)
      raises (InvalidCredential, UnwatchedCredential, ServiceFailure);

  void watchCredentials(in CredentialSeq fCredentials)
      raises (InvalidCredentials, ServiceFailure);
  void unwatchCredentials(in CredentialSeq fCredentials)
      raises (InvalidCredentials, UnwatchedCredentials, ServiceFailure);

  void unregister() raises (ServiceFailure);
};

/**
 * \brief ???
 */
interface IObservable {
  CredentialObserver registerObserver(in ICredentialObserver fCallback)
      raises (ServiceFailure);
};

/*------------------------- Credential Entries ----------------------------*/

/** \brief Representa o identificador de um observador de credencial. */
typedef Identifier CredentialObserverIdentifier;

/** \brief Representa uma sequência de identificadores de observadores de credenciais. */
typedef sequence<CredentialObserverIdentifier> CredentialObserverIdentifierList;

/**
 * \brief Representa a entrada completa de uma credencial de um membro.
 */
struct EntryCredential {
  Credential aCredential;
  boolean certified;
  CredentialObserverIdentifierList observers;
  CredentialObserverIdentifierList observedBy;
};

/** \brief Representa uma sequência de entradas completas de credenciais. */
typedef sequence<EntryCredential> EntryCredentialSeq;

interface CredentialEntryManagement {
  /**
   * \brief Retorna uma entrada de credencial válida.
   *
   * \param aCredential A credencial.
   *
   * \return \c a credencial se existente, ou \c nil, caso contrário.
   */
  EntryCredential getCredentialEntry (in Credential aCredential);

  /**
   * \brief Retorna todas as entradas de credenciais válidas.
   */
  EntryCredentialSeq getAllCredentialEntries ();
};

/*--------------------------------- Sistema -------------------------------*/

/** 
 * \brief Representa os sistema que fazem parte do barramento.
 *   Este elemento é de caráter gerencial, as implantações do sistemas
 *   que realmente interagem com o barramento.
 *
 * \see SystemDeployment
 */
struct System {
  string fId;  /**< \brief Identificar único, no estilo login UNIX */
  string fDescription; /**< /brief Descrição do sistema */
};

/** \brief Seqüência de sistemas */
typedef sequence<System> SystemList;

/** \brief Sistema já está cadastrado. */
exception SystemAlreadyExists {};

/** 
 * \brief Sistema não pode ser removido pois alguma entidade faz referência
 * ao mesmo.
 */
exception SystemInUse {};

/** \brief Sistema não existe. */
exception SystemDoesNotExist {};

/*------------------------------ Implantação ------------------------------*/

/**
 * \brief Representa a implantação de um sistema.
 *   São as implantações que interagem com o barramento, exportando e
 *   consumindo serviços.
 */
struct SystemDeployment {
  string fId;       /**< \brief Identificar único, no estilo login UNIX. */
  string fSystemId; /**< \brief Identificador do sistema a que esta implantação
                         está relacionada. */
  string fDescription; /**< \brief Descrição da implantação. */
};

/** \brief Seqüência de implantações. */
typedef sequence<SystemDeployment> SystemDeploymentList;

/** \brief Certificado que a implantação utiliza na autenticação. */
typedef sequence<octet> Certificate;

/** \brief Certificado inválido */
exception InvalidCertificate {};

/** \brief Implantação já está cadastrada. */
exception SystemDeploymentAlreadyExists {};

/** \brief Implantação de sistema não está cadastrada. */
exception SystemDeploymentDoesNotExist {};

/*--------------------------------- Usuário -------------------------------*/
struct User {
  string fId;   /**< \brief Identificar único, no estilo login UNIX. */
  string fName; /**< \brief Nome do usuário. */
};

/** \brief Seqüência de usuários. */
typedef sequence<User> UserList;

/** \brief Usuário já está cadastrado. */
exception UserAlreadyExists {};

/** \brief Usuário não está cadastrado. */
exception UserDoesNotExist {};

/*------------------------------- IManagement -----------------------------*/

/**
 * \brief Interface de gerenciamento de sistemas e implatações.
 */
interface IManagement {
  /** 
   * \brief Cadastra um novo sistema.
   *  
   * \param id Identificador único do sistema.
   * \param description Descrição do sistema.
   *
   * \exception SystemAlreadyExists Um sistema com o mesmo identificador
   * já está cadastrado.
   */
  void addSystem(in string fId, in string fDescription)
      raises (SystemAlreadyExists, ServiceFailure);

  /** 
   * \brief Remove o sistema do barramento.
   * Um sistema só poderá ser removido se não possuir nenhuma
   * implantação cadastrada que o referencia.
   *
   * \param id Identificador do sistema.
   *
   * \exception SystemInUse O sistema possui alguma implantação cadastrada.
   * \exception SystemDoesNotExist Sistema não cadastrado.
   */
  void removeSystem(in string fId)
      raises (SystemInUse, SystemDoesNotExist, ServiceFailure);
  void removeSystemForcefully(in string fId)
      raises (SystemDoesNotExist, ServiceFailure);

  /**
   * \brief Atualiza a descrição do sistema.
   *
   * \param id Identificador do sistema.
   * \param description Nova descrição para o sistema.
   *
   * \exception SystemDoesNotExist Sistema não cadastrado.
   */
  void setSystemDescription(in string fId, in string fDescription)
      raises (SystemDoesNotExist, ServiceFailure);

  /** 
   * \brief Recupera todos os sistemas cadastrados.
   *
   * \return Uma seqüência de sistemas.
   */
  SystemList getSystems() raises (ServiceFailure);

  /** 
   * \brief Recupera um sistema dado o seu identificador.
   *
   * \param id Identificador do sistema.
   *
   * \return Sistema referente ao identificador.
   * \exception SystemDoesNotExist Sistema não cadastrado.
   */
  System getSystem(in string fId) raises (SystemDoesNotExist, ServiceFailure);

  /*---------------------------- Implantações -------------------------------*/

  /**
   * \brief Cadastra uma nova implantação para um sistema.
   *
   * \param id Identificador único da implantação (estilo login UNIX).
   * \param systeId Identificador do sistema a que esta implantação pertence.
   * \param description Descrição da implantação.
   *
   * \exception SystemDeploymentAlreadyExists Existe outra implantação com
   *   o identificador fornecido.
   * \exception SystemDoesNotExist Sistema não cadastrado.
   * \exception InvalidCertificate Certificado inválido.
   */
  void addSystemDeployment(in string fId, in string fSystemId,
      in string fDescription, in Certificate fCertificate)
      raises (SystemDeploymentAlreadyExists, SystemDoesNotExist,
      InvalidCertificate, ServiceFailure);

  /**
   * \brief Remove uma implantação de sistema.
   *
   * \param id Identificador da implantação.
   *
   * \exception SystemDeploymentDoesNotExist Implantação não cadastrada.
   */
  void removeSystemDeployment(in string fId)
      raises (SystemDeploymentDoesNotExist, ServiceFailure);

  /**
   * \brief Altera a descrição da implantação.
   *
   * \param id Identificador da implantação.
   * \param description Nova descrição da implantação.
   *
   * \exception SystemDeploymentDoesNotExist Implantação não cadastrada.
   */
  void setSystemDeploymentDescription(in string fId, in string fDescription)
      raises (SystemDeploymentDoesNotExist, ServiceFailure);

  /**
   * \brief Recupera o certificado da implantação.
   *
   * \param id Identificador da implantação.
   *
   * \return Certificado da implantação.
   *
   * \exception SystemDeploymentDoesNotExist Implantação não cadastrada.
   */
  Certificate getSystemDeploymentCertificate(in string fId)
      raises (SystemDeploymentDoesNotExist, ServiceFailure);

  /**
   * \brief Altera o certificado da implantação.
   *
   * \param id Identificador da implantação.
   * \param certificate Novo certificado da implantação.
   *
   * \exception SystemDeploymentDoesNotExist Implantação não cadastrada.
   * \exception InvalidSystemCertificate Certificado inválido.
   */
  void setSystemDeploymentCertificate(in string fId,
      in Certificate fCertificate)
      raises (SystemDeploymentDoesNotExist, InvalidCertificate, ServiceFailure);

  /**
   * \brief Recupera todas implantações cadastradas.
   *
   * \return Uma seqüência com as implantações cadastradas. 
   */
  SystemDeploymentList getSystemDeployments() raises (ServiceFailure);

  /**
   * \brief Recupera a implantação dado o seu identificador.
   *
   * \return Retorna a implantação referente ao identificador.
   *
   * \exception SystemDeploymentDoesNotExist Implantação não cadastrada.
   */
  SystemDeployment getSystemDeployment(in string fId)
      raises (SystemDeploymentDoesNotExist, ServiceFailure);

  /**
   * \brief Recupera todas as implantações de um dado sistema.
   *
   * \param systemId Identificador do sistema 
   *
   * \return Seqüência com as implantações referentes ao sistema informado.
   *
   * \exception SystemDoesNotExist Sistema informado não está cadastrado.
   */
  SystemDeploymentList getSystemDeploymentsBySystemId(in string fSystemId)
      raises(SystemDoesNotExist, ServiceFailure);

  /**
   * \brief Cadastra um novo usuário no barramento.
   *
   * \param id Identificador único do usuário (estilo login UNIX).
   * \param name Nome do usuário.
   *
   * \exception UserAlreadyExists Existe outro usuário com
   *   o identificador fornecido.
   */
  void addUser(in string fId, in string fName)
      raises (UserAlreadyExists, ServiceFailure);

  /**
   * \brief Remove um usuário do barramento.
   *
   * \param id Identificador do usuário.
   *
   * \exception UserDoesNotExist Usuário não cadastrado.
   */
  void removeUser(in string fId) raises (UserDoesNotExist, ServiceFailure);

  /**
   * \brief Altera o nome do usuário.
   *
   * \param id Identificador do usuário.
   * \param name Novo nome do usuário.
   *
   * \exception UserDoesNotExist Usuário não cadastrado.
   */
  void setUserName(in string fId, in string fName)
      raises (UserDoesNotExist, ServiceFailure);

  /**
   * \brief Recupera o usuário, dado o seu identificador.
   *
   * \return Retorna o usuário.
   *
   * \exception UserDoesNotExist Usuário não cadastrado.
   */
  User getUser(in string fId) raises (UserDoesNotExist, ServiceFailure);

  /**
   * \brief Recupera todos os usuários cadastrados.
   *
   * \return Uma seqüência com os usuários.
   */
  UserList getUsers() raises (ServiceFailure);
};

}; // access_control_service

}; // version

}; // core

}; // openbus

}; // tecgraf

#endif
